{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { getAuthData } from './storage';\n/* Tipo um Enum, para auxiliar a descodificar o token */\n\n/*Função para descodificar o token */\nexport const getTokenData = () => {\n  try {\n    return jwtDecode(getAuthData().access_token);\n  } catch (error) {\n    return undefined;\n  }\n};\n/** Função para verificar se um User está autenticado\r\n * Essencialmente, recorrendo ao Unix Time Stamp, comparamos se a nossa data atual é menor que o tempo definido no token (ultimos 2 algarismos)\r\n * Se true, o token é válido e o user está autenticado.\r\n * */\n\nexport const isAuthenticated = () => {\n  const tokenData = getTokenData();\n  return tokenData && tokenData.exp * 1000 > Date.now() ? true : false;\n};\n/**Função para determinar os Roles dos users\r\n * Utiliza os \"Enums\" definidos, admin e operator\r\n * e a tokenData -> token que contém info sobre o user, especificamente neste caso, importam os roles que possuem\r\n */\n\nexport const hasAnyRoles = roles => {\n  if (roles.length === 0) {\n    return true;\n  }\n\n  const tokenData = getTokenData();\n\n  if (tokenData !== undefined) {\n    return roles.some(role => tokenData.authorities.includes(role));\n  }\n\n  return false;\n};","map":{"version":3,"names":["jwtDecode","getAuthData","getTokenData","access_token","error","undefined","isAuthenticated","tokenData","exp","Date","now","hasAnyRoles","roles","length","some","role","authorities","includes"],"sources":["C:/ferreiraLapa/projetopathos/frontweb/src/util/auth.ts"],"sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport { getAuthData } from './storage';\r\n\r\n/* Tipo um Enum, para auxiliar a descodificar o token */\r\n\r\nexport type Role = 'ROLE_ADMIN' | 'ROLE_OPERATOR';\r\n\r\n/* tipo para descodificar o token e verificar o tempo de expiração */\r\nexport type TokenData = {\r\n  exp: number;\r\n  user_name: string;\r\n  authorities: Role[];\r\n};\r\n\r\n/*Função para descodificar o token */\r\nexport const getTokenData = (): TokenData | undefined => {\r\n  try {\r\n    return jwtDecode(getAuthData().access_token);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\n/** Função para verificar se um User está autenticado\r\n * Essencialmente, recorrendo ao Unix Time Stamp, comparamos se a nossa data atual é menor que o tempo definido no token (ultimos 2 algarismos)\r\n * Se true, o token é válido e o user está autenticado.\r\n * */\r\nexport const isAuthenticated = (): boolean => {\r\n  const tokenData = getTokenData();\r\n  return tokenData && tokenData.exp * 1000 > Date.now() ? true : false;\r\n};\r\n\r\n/**Função para determinar os Roles dos users\r\n * Utiliza os \"Enums\" definidos, admin e operator\r\n * e a tokenData -> token que contém info sobre o user, especificamente neste caso, importam os roles que possuem\r\n */\r\nexport const hasAnyRoles = (roles: Role[]): boolean => {\r\n  if (roles.length === 0) {\r\n    return true;\r\n  }\r\n\r\n  const tokenData = getTokenData();\r\n\r\n  if (tokenData !== undefined) {\r\n    return roles.some((role) => tokenData.authorities.includes(role));\r\n  }\r\n\r\n  return false;\r\n};\r\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,WAA5B;AAEA;;AAWA;AACA,OAAO,MAAMC,YAAY,GAAG,MAA6B;EACvD,IAAI;IACF,OAAOF,SAAS,CAACC,WAAW,GAAGE,YAAf,CAAhB;EACD,CAFD,CAEE,OAAOC,KAAP,EAAc;IACd,OAAOC,SAAP;EACD;AACF,CANM;AAQP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAe;EAC5C,MAAMC,SAAS,GAAGL,YAAY,EAA9B;EACA,OAAOK,SAAS,IAAIA,SAAS,CAACC,GAAV,GAAgB,IAAhB,GAAuBC,IAAI,CAACC,GAAL,EAApC,GAAiD,IAAjD,GAAwD,KAA/D;AACD,CAHM;AAKP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAA4B;EACrD,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;IACtB,OAAO,IAAP;EACD;;EAED,MAAMN,SAAS,GAAGL,YAAY,EAA9B;;EAEA,IAAIK,SAAS,KAAKF,SAAlB,EAA6B;IAC3B,OAAOO,KAAK,CAACE,IAAN,CAAYC,IAAD,IAAUR,SAAS,CAACS,WAAV,CAAsBC,QAAtB,CAA+BF,IAA/B,CAArB,CAAP;EACD;;EAED,OAAO,KAAP;AACD,CAZM"},"metadata":{},"sourceType":"module"}