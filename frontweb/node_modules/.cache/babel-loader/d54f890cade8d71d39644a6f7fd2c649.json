{"ast":null,"code":"var _jsxFileName = \"C:\\\\ferreiraLapa\\\\projetopathos\\\\frontweb\\\\src\\\\pages\\\\EdificioDetails\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { ReactComponent as ArrowIcon } from 'assets/images/arrow.svg';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { BASE_URL } from 'util/requests';\nimport EdificioInfoLoader from './EdificioInfoLoader';\nimport EdificioDetailsLoader from './EdificioDetailsLoader';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EdificioDetails = () => {\n  _s();\n\n  /*Objeto desestruturado - para funcionar, temos q declará-lo através de um \"type\" antes de o utilizar \r\n    Agora podemos capturar, (no axios.get) os parametros URL que forem passados. \r\n    Neste caso, vamos capturar o edificioId (declarado no type UrlParams acima)\r\n    Nota: Podem ser vários parametros.\r\n  */\n  const {\n    edificioId\n  } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [edificio, setEdificio] = useState();\n  /*\r\n  Chamada de API assíncrona -> ou seja, dispara enquanto a app roda e só num momento posterior chegará a resposta dessa requisição\r\n  Como controlamos a chegada da requisição? Através de uma Promise, neste caso .then\r\n  Esse \".then\", executa algo ao receber a requisição. Pode ser uma função, ou uma expressão lambda.\r\n  Definimos então um argumento com um determinado nome, normalmente será \"response\" para implementar uma expressão lambda neste caso,\r\n  e depois escrevemos o que queremos executar.\r\n    React Hooks -> Depois, é necessário controlar os momentos em que a chamada e a sequente cadeia de comandos/funções executam.\r\n  que vão permitir guardar o estado do \"edificio\" (em memória) e depois utilizamos conforme a necessidade.\r\n    useState -> Para armazenar o estado de um componente (ver acima)\r\n  Será uma constante com 2 elementos, onde recebemos o estado e onde atualizamos o valor do mesmo e onde parametrizamos o tipo do estado (Edificio)\r\n  Depois utilizamos na response abaixo para atualizar.\r\n    useEffect -> 2 argumentos. 1 função para executar (quando o componente for montado/renderizado) e 1 lista de dependencias \r\n  (lista de objetos que queremos observar, quando é alterada, a função roda novamente - nova renderização), ou seja,\r\n  Se o edificioId mudar, a requisição get é chamada novamente para o atualizar, semelhante a um \"observer\"\r\n  */\n\n  useEffect(() => {\n    setIsLoading(true);\n    axios.get(`${BASE_URL}/edificios/${edificioId}`).then(response => {\n      setEdificio(response.data);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  }, [edificioId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"edificio-details-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"base-card edificio-details-card\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/edificios\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"go-back-container\",\n          children: [/*#__PURE__*/_jsxDEV(ArrowIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Voltar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xl-6\",\n          children: isLoading ? /*#__PURE__*/_jsxDEV(EdificioInfoLoader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"img-container\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: edificio === null || edificio === void 0 ? void 0 : edificio.imgUrl,\n                alt: edificio === null || edificio === void 0 ? void 0 : edificio.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"name-typology-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: edificio === null || edificio === void 0 ? void 0 : edificio.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: edificio === null || edificio === void 0 ? void 0 : edificio.tipologia\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xl-6\",\n          children: isLoading ? /*#__PURE__*/_jsxDEV(EdificioDetailsLoader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"description-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: edificio === null || edificio === void 0 ? void 0 : edificio.localizacao\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: edificio === null || edificio === void 0 ? void 0 : edificio.utilizacao\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EdificioDetails, \"fRsA6tGMcZkhsTPHsCMOwfZNjoc=\", false, function () {\n  return [useParams];\n});\n\n_c = EdificioDetails;\nexport default EdificioDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"EdificioDetails\");","map":{"version":3,"names":["ReactComponent","ArrowIcon","axios","useEffect","useState","Link","useParams","BASE_URL","EdificioInfoLoader","EdificioDetailsLoader","EdificioDetails","edificioId","isLoading","setIsLoading","edificio","setEdificio","get","then","response","data","finally","imgUrl","name","tipologia","localizacao","utilizacao"],"sources":["C:/ferreiraLapa/projetopathos/frontweb/src/pages/EdificioDetails/index.tsx"],"sourcesContent":["import { ReactComponent as ArrowIcon } from 'assets/images/arrow.svg';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Edificio } from 'types/edificio';\r\nimport { BASE_URL } from 'util/requests';\r\nimport EdificioInfoLoader from './EdificioInfoLoader';\r\nimport EdificioDetailsLoader from './EdificioDetailsLoader';\r\n\r\nimport './styles.css';\r\n\r\ntype UrlParams = {\r\n  edificioId: string;\r\n};\r\n\r\nconst EdificioDetails = () => {\r\n  /*Objeto desestruturado - para funcionar, temos q declará-lo através de um \"type\" antes de o utilizar \r\n    Agora podemos capturar, (no axios.get) os parametros URL que forem passados. \r\n    Neste caso, vamos capturar o edificioId (declarado no type UrlParams acima)\r\n    Nota: Podem ser vários parametros.\r\n  */\r\n  const { edificioId } = useParams<UrlParams>();\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [edificio, setEdificio] = useState<Edificio>();\r\n\r\n  /*\r\n  Chamada de API assíncrona -> ou seja, dispara enquanto a app roda e só num momento posterior chegará a resposta dessa requisição\r\n  Como controlamos a chegada da requisição? Através de uma Promise, neste caso .then\r\n  Esse \".then\", executa algo ao receber a requisição. Pode ser uma função, ou uma expressão lambda.\r\n  Definimos então um argumento com um determinado nome, normalmente será \"response\" para implementar uma expressão lambda neste caso,\r\n  e depois escrevemos o que queremos executar.\r\n\r\n  React Hooks -> Depois, é necessário controlar os momentos em que a chamada e a sequente cadeia de comandos/funções executam.\r\n  que vão permitir guardar o estado do \"edificio\" (em memória) e depois utilizamos conforme a necessidade.\r\n\r\n  useState -> Para armazenar o estado de um componente (ver acima)\r\n  Será uma constante com 2 elementos, onde recebemos o estado e onde atualizamos o valor do mesmo e onde parametrizamos o tipo do estado (Edificio)\r\n  Depois utilizamos na response abaixo para atualizar.\r\n\r\n  useEffect -> 2 argumentos. 1 função para executar (quando o componente for montado/renderizado) e 1 lista de dependencias \r\n  (lista de objetos que queremos observar, quando é alterada, a função roda novamente - nova renderização), ou seja,\r\n  Se o edificioId mudar, a requisição get é chamada novamente para o atualizar, semelhante a um \"observer\"\r\n  */\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    axios\r\n      .get(`${BASE_URL}/edificios/${edificioId}`)\r\n      .then((response) => {\r\n        setEdificio(response.data);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [edificioId]);\r\n\r\n  return (\r\n    <div className=\"edificio-details-container\">\r\n      <div className=\"base-card edificio-details-card\">\r\n        <Link to=\"/edificios\">\r\n          <div className=\"go-back-container\">\r\n            <ArrowIcon />\r\n            <h2>Voltar</h2>\r\n          </div>\r\n        </Link>\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-6\">\r\n            {isLoading ? (\r\n              <EdificioInfoLoader />\r\n            ) : (\r\n              <>\r\n                <div className=\"img-container\">\r\n                  <img src={edificio?.imgUrl} alt={edificio?.name} />\r\n                </div>\r\n                <div className=\"name-typology-container\">\r\n                  <h1>{edificio?.name}</h1>\r\n                  <h3>{edificio?.tipologia}</h3>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"col-xl-6\">\r\n            {isLoading ? (\r\n              <EdificioDetailsLoader />\r\n            ) : (\r\n              <div className=\"description-container\">\r\n                <h2>{edificio?.localizacao}</h2>\r\n                <p>\r\n                  <h2>{edificio?.utilizacao}</h2>\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EdificioDetails;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}