{"ast":null,"code":"var _jsxFileName = \"C:\\\\ferreiraLapa\\\\projetopathos\\\\frontweb\\\\src\\\\pages\\\\Admin\\\\Edificios\\\\List\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport EdificioFilter from 'components/EdificioFilter';\nimport Pagination from 'components/Pagination';\nimport EdificioCrudCard from 'pages/Admin/Edificios/EdificioCrudCard';\nimport { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { requestBackend } from 'util/requests';\nimport './styles.css';\n/**\r\n * É necessário criar 2 componentes (filhos - filtro e paginação) de controlo nesta página, a parte da paginação e a parte dos filtros\r\n * para por sua vez controlarem a listagem e o que consta na mesma.\r\n * Para facilitar a comunicação entre estes 3 componentes, procedemos a uma refatoração antes de aplicar os filtros\r\n * Assim, vamos querer manter um novo estado, para guardar os dados desses componentes que controlam a listagem.\r\n * Então criámos o type abaixo - dados dos componentes de controlo. Que vem tanto do componente Pagination e do\r\n *\r\n * Depois criámos o useState que mantem o estado dos dados de todos os componentes q fazem algum controlo da listagem.\r\n * Quando disparar o evento onChange do Pagination,ao invés de chamar o Pagination, que por sua vez chamaria o getEdificio,\r\n * chama antes um numero referente à pagina ativa (q vem do estado original), através da função handlePageChange.\r\n * \r\n * o type ControlComponentsData serve para definir o tipo do nosso estado do nosso componente que armazena os dados dos componentes\r\n * de controlo, que são o da Pagination e ainda os do Filtro.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst List = () => {\n  _s();\n\n  const [page, setPage] = useState();\n  const [controlComponentsData, setControlComponentsData] = useState({\n    activePage: 0\n  });\n\n  const handleSubmitFilter = data => {};\n\n  const handlePageChange = pageNumber => {\n    setControlComponentsData({\n      activePage: pageNumber\n    });\n  };\n  /**\r\n   * Na requisição, o getEdificios recebe a página do BE, ao fazer o Get, e passa como parâmetro o numero de página.\r\n   * Permitirá disparar o evento onChange na mudança de página.\r\n   * No useEffect, disparado aquando o render da página, o getEdificios já fornece então a página.\r\n   *\r\n   * Para evitar loop infinito, temos que usar o hook useCallback, que guarda e verifica se a referencia nas dependencias é a mesma,\r\n   * caso seja, não roda novamente\r\n   */\n\n\n  const getEdificios = useCallback(() => {\n    const config = {\n      method: 'GET',\n      url: '/edificios',\n      params: {\n        page: controlComponentsData.activePage,\n        size: 2\n      }\n    };\n    requestBackend(config).then(response => {\n      setPage(response.data);\n    });\n  }, [controlComponentsData]);\n  /**\r\n   * o método para requisição ao BE, passou também para este useEffect, pois quando o componente é montado, a lógica de requisição é executada\r\n   * e busca a página 0 por padrão, salva-a para o estado do componente (setPage) e tem a dependência que \"observa\" quando ocorrem mudanças\r\n   * no activePage (acima) e efetua o refresh\r\n   */\n\n  useEffect(() => {\n    getEdificios();\n  }, [getEdificios]);\n  /**\r\n   * No Link abaixo (do botão adicionar/criar, no form temos que diferenciar entre a rota para criar e para editar)\r\n   * A palavra \"create\" casa com a rota :/edificioId, temos somente que diferenciar posteriormente\r\n   */\n\n  /**\r\n   * Padrão de projetos Observer - a função onDelete()\r\n   */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"edificio-crud-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edificio-crud-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/admin/edificios/create\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary text-white btn-crud-add\",\n          children: \"ADICIONAR / CRIAR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EdificioFilter, {\n        onSubmitFilter: handleSubmitFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: page === null || page === void 0 ? void 0 : page.content.map(edificio => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm-6 col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(EdificioCrudCard, {\n          edificio: edificio,\n          onDelete: getEdificios\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, edificio.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      pageCount: page ? page.totalElements : 0,\n      range: 3,\n      onChange: handlePageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n/**\r\n * no onChange, dentro do Pagination acima, estamos \"apenas\" a passar a referência da funação getEdificios,\r\n * pois recebe um número e não retorna nada, contemplando a assinatura da função definida no Props no componente Pagination\r\n * e na sua configuração, no Pagination, já foi chamada passando o argumento e, assim, só precisamos agora de passar a referência da mesma.\r\n */\n\n\n_s(List, \"BT62uRuGMYk6E1v/KWtY52MH6wQ=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["EdificioFilter","Pagination","EdificioCrudCard","useCallback","useEffect","useState","Link","requestBackend","List","page","setPage","controlComponentsData","setControlComponentsData","activePage","handleSubmitFilter","data","handlePageChange","pageNumber","getEdificios","config","method","url","params","size","then","response","content","map","edificio","id","totalElements"],"sources":["C:/ferreiraLapa/projetopathos/frontweb/src/pages/Admin/Edificios/List/index.tsx"],"sourcesContent":["import { AxiosRequestConfig } from 'axios';\r\nimport EdificioFilter, { EdificioFilterData } from 'components/EdificioFilter';\r\nimport Pagination from 'components/Pagination';\r\nimport EdificioCrudCard from 'pages/Admin/Edificios/EdificioCrudCard';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Edificio } from 'types/edificio';\r\nimport { SpringPage } from 'types/vendor/spring';\r\nimport { requestBackend } from 'util/requests';\r\n\r\nimport './styles.css';\r\n\r\n/**\r\n * É necessário criar 2 componentes (filhos - filtro e paginação) de controlo nesta página, a parte da paginação e a parte dos filtros\r\n * para por sua vez controlarem a listagem e o que consta na mesma.\r\n * Para facilitar a comunicação entre estes 3 componentes, procedemos a uma refatoração antes de aplicar os filtros\r\n * Assim, vamos querer manter um novo estado, para guardar os dados desses componentes que controlam a listagem.\r\n * Então criámos o type abaixo - dados dos componentes de controlo. Que vem tanto do componente Pagination e do\r\n *\r\n * Depois criámos o useState que mantem o estado dos dados de todos os componentes q fazem algum controlo da listagem.\r\n * Quando disparar o evento onChange do Pagination,ao invés de chamar o Pagination, que por sua vez chamaria o getEdificio,\r\n * chama antes um numero referente à pagina ativa (q vem do estado original), através da função handlePageChange.\r\n * \r\n * o type ControlComponentsData serve para definir o tipo do nosso estado do nosso componente que armazena os dados dos componentes\r\n * de controlo, que são o da Pagination e ainda os do Filtro.\r\n */\r\n\r\ntype ControlComponentsData = {\r\n  activePage: number;\r\n};\r\n\r\nconst List = () => {\r\n  const [page, setPage] = useState<SpringPage<Edificio>>();\r\n\r\n  const [controlComponentsData, setControlComponentsData] =\r\n    useState<ControlComponentsData>({\r\n      activePage: 0,\r\n    });\r\n\r\n\r\n  const handleSubmitFilter = (data: EdificioFilterData) => {\r\n\r\n  }\r\n\r\n  const handlePageChange = (pageNumber: number) => {\r\n    setControlComponentsData({ activePage: pageNumber });\r\n  };\r\n\r\n  /**\r\n   * Na requisição, o getEdificios recebe a página do BE, ao fazer o Get, e passa como parâmetro o numero de página.\r\n   * Permitirá disparar o evento onChange na mudança de página.\r\n   * No useEffect, disparado aquando o render da página, o getEdificios já fornece então a página.\r\n   *\r\n   * Para evitar loop infinito, temos que usar o hook useCallback, que guarda e verifica se a referencia nas dependencias é a mesma,\r\n   * caso seja, não roda novamente\r\n   */\r\n  const getEdificios = useCallback(() => {\r\n    const config: AxiosRequestConfig = {\r\n      method: 'GET',\r\n      url: '/edificios',\r\n      params: {\r\n        page: controlComponentsData.activePage,\r\n        size: 2,\r\n      },\r\n    };\r\n\r\n    requestBackend(config).then((response) => {\r\n      setPage(response.data);\r\n    });\r\n  }, [controlComponentsData]);\r\n\r\n  /**\r\n   * o método para requisição ao BE, passou também para este useEffect, pois quando o componente é montado, a lógica de requisição é executada\r\n   * e busca a página 0 por padrão, salva-a para o estado do componente (setPage) e tem a dependência que \"observa\" quando ocorrem mudanças\r\n   * no activePage (acima) e efetua o refresh\r\n   */\r\n  useEffect(() => {\r\n    getEdificios();\r\n  }, [getEdificios]);\r\n\r\n  /**\r\n   * No Link abaixo (do botão adicionar/criar, no form temos que diferenciar entre a rota para criar e para editar)\r\n   * A palavra \"create\" casa com a rota :/edificioId, temos somente que diferenciar posteriormente\r\n   */\r\n\r\n  /**\r\n   * Padrão de projetos Observer - a função onDelete()\r\n   */\r\n  return (\r\n    <div className=\"edificio-crud-container\">\r\n      <div className=\"edificio-crud-bar-container\">\r\n        <Link to=\"/admin/edificios/create\">\r\n          <button className=\"btn btn-primary text-white btn-crud-add\">\r\n            ADICIONAR / CRIAR\r\n          </button>\r\n        </Link>\r\n        <EdificioFilter onSubmitFilter={handleSubmitFilter} />\r\n      </div>\r\n      <div className=\"row\">\r\n        {page?.content.map((edificio) => (\r\n          <div key={edificio.id} className=\"col-sm-6 col-md-12\">\r\n            <EdificioCrudCard edificio={edificio} onDelete={getEdificios} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Pagination\r\n        pageCount={page ? page.totalElements : 0}\r\n        range={3}\r\n        onChange={handlePageChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * no onChange, dentro do Pagination acima, estamos \"apenas\" a passar a referência da funação getEdificios,\r\n * pois recebe um número e não retorna nada, contemplando a assinatura da função definida no Props no componente Pagination\r\n * e na sua configuração, no Pagination, já foi chamada passando o argumento e, assim, só precisamos agora de passar a referência da mesma.\r\n */\r\n\r\nexport default List;\r\n"],"mappings":";;;AACA,OAAOA,cAAP,MAAmD,2BAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,IAAT,QAAqB,kBAArB;AAGA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAO,cAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAMA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EACjB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,EAAhC;EAEA,MAAM,CAACM,qBAAD,EAAwBC,wBAAxB,IACJP,QAAQ,CAAwB;IAC9BQ,UAAU,EAAE;EADkB,CAAxB,CADV;;EAMA,MAAMC,kBAAkB,GAAIC,IAAD,IAA8B,CAExD,CAFD;;EAIA,MAAMC,gBAAgB,GAAIC,UAAD,IAAwB;IAC/CL,wBAAwB,CAAC;MAAEC,UAAU,EAAEI;IAAd,CAAD,CAAxB;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,MAAMC,YAAY,GAAGf,WAAW,CAAC,MAAM;IACrC,MAAMgB,MAA0B,GAAG;MACjCC,MAAM,EAAE,KADyB;MAEjCC,GAAG,EAAE,YAF4B;MAGjCC,MAAM,EAAE;QACNb,IAAI,EAAEE,qBAAqB,CAACE,UADtB;QAENU,IAAI,EAAE;MAFA;IAHyB,CAAnC;IASAhB,cAAc,CAACY,MAAD,CAAd,CAAuBK,IAAvB,CAA6BC,QAAD,IAAc;MACxCf,OAAO,CAACe,QAAQ,CAACV,IAAV,CAAP;IACD,CAFD;EAGD,CAb+B,EAa7B,CAACJ,qBAAD,CAb6B,CAAhC;EAeA;AACF;AACA;AACA;AACA;;EACEP,SAAS,CAAC,MAAM;IACdc,YAAY;EACb,CAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;EAIA;AACF;AACA;AACA;;EAEE;AACF;AACA;;EACE,oBACE;IAAK,SAAS,EAAC,yBAAf;IAAA,wBACE;MAAK,SAAS,EAAC,6BAAf;MAAA,wBACE,QAAC,IAAD;QAAM,EAAE,EAAC,yBAAT;QAAA,uBACE;UAAQ,SAAS,EAAC,yCAAlB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,eAME,QAAC,cAAD;QAAgB,cAAc,EAAEJ;MAAhC;QAAA;QAAA;QAAA;MAAA,QANF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eASE;MAAK,SAAS,EAAC,KAAf;MAAA,UACGL,IADH,aACGA,IADH,uBACGA,IAAI,CAAEiB,OAAN,CAAcC,GAAd,CAAmBC,QAAD,iBACjB;QAAuB,SAAS,EAAC,oBAAjC;QAAA,uBACE,QAAC,gBAAD;UAAkB,QAAQ,EAAEA,QAA5B;UAAsC,QAAQ,EAAEV;QAAhD;UAAA;UAAA;UAAA;QAAA;MADF,GAAUU,QAAQ,CAACC,EAAnB;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QATF,eAgBE,QAAC,UAAD;MACE,SAAS,EAAEpB,IAAI,GAAGA,IAAI,CAACqB,aAAR,GAAwB,CADzC;MAEE,KAAK,EAAE,CAFT;MAGE,QAAQ,EAAEd;IAHZ;MAAA;MAAA;MAAA;IAAA,QAhBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD,CAjFD;AAmFA;AACA;AACA;AACA;AACA;;;GAvFMR,I;;KAAAA,I;AAyFN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}