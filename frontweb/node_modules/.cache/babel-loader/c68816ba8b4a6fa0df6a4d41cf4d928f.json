{"ast":null,"code":"/* tipo que define a estrutura de resposta do login -> q pode ser visualizado, por exemplo, no localStorage do browser, ou no Postman tb*/\nconst tokenKey = 'authData';\n/* Para salvar o objeto do type LoginResponse - dados de autenticação - através da referencia global localStorage e da função da mesma, setItem\r\nIsto será utilizado para fazer requisições autorizadas, por exemplo.\r\n*/\n\nexport const saveAuthData = obj => {\n  localStorage.setItem(tokenKey, JSON.stringify(obj));\n};\n/* Para obter os dados, em String, do localStorage do browser. \r\n\r\nComo queremos um objeto ao invés de uma String, temos q converter através do parse.\r\nTemos q nos certificar que a string não passa um nulo, através de um operador de coalescência para\r\nassegurar que passa um objeto, mesmo q vazio, mas entre aspas, para converter o obj em string e vice-versa depois.\r\n\r\nPara garantir que devolvemos o type correto, fazemos um cast (as LoginResponse) e temos assim uma situação type safe. \r\n*/\n\nexport const getAuthData = () => {\n  var _localStorage$getItem;\n\n  const str = (_localStorage$getItem = localStorage.getItem(tokenKey)) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '{}';\n  return JSON.parse(str);\n};\nexport const removeAuthData = () => {\n  localStorage.removeItem(tokenKey);\n};","map":{"version":3,"names":["tokenKey","saveAuthData","obj","localStorage","setItem","JSON","stringify","getAuthData","str","getItem","parse","removeAuthData","removeItem"],"sources":["C:/ferreiraLapa/projetopathos/frontweb/src/util/storage.ts"],"sourcesContent":["/* tipo que define a estrutura de resposta do login -> q pode ser visualizado, por exemplo, no localStorage do browser, ou no Postman tb*/\r\ntype LoginResponse = {\r\n    access_token: string;\r\n    token_type: string;\r\n    expires_in: number;\r\n    scope: string;\r\n    userFirstName: string;\r\n    userId: number;\r\n  };\r\n\r\nconst tokenKey = 'authData';\r\n\r\n/* Para salvar o objeto do type LoginResponse - dados de autenticação - através da referencia global localStorage e da função da mesma, setItem\r\nIsto será utilizado para fazer requisições autorizadas, por exemplo.\r\n*/\r\nexport const saveAuthData = (obj: LoginResponse) => {\r\n    localStorage.setItem(tokenKey, JSON.stringify(obj));\r\n  };\r\n  \r\n  /* Para obter os dados, em String, do localStorage do browser. \r\n  \r\n  Como queremos um objeto ao invés de uma String, temos q converter através do parse.\r\n  Temos q nos certificar que a string não passa um nulo, através de um operador de coalescência para\r\n  assegurar que passa um objeto, mesmo q vazio, mas entre aspas, para converter o obj em string e vice-versa depois.\r\n  \r\n  Para garantir que devolvemos o type correto, fazemos um cast (as LoginResponse) e temos assim uma situação type safe. \r\n  */\r\n  export const getAuthData = () => {\r\n    const str = localStorage.getItem(tokenKey) ?? '{}';\r\n    return JSON.parse(str) as LoginResponse;\r\n  };\r\n  \r\n  export const removeAuthData = () => {\r\n    localStorage.removeItem(tokenKey);\r\n  };"],"mappings":"AAAA;AAUA,MAAMA,QAAQ,GAAG,UAAjB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIC,GAAD,IAAwB;EAChDC,YAAY,CAACC,OAAb,CAAqBJ,QAArB,EAA+BK,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAA/B;AACD,CAFI;AAIL;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAO,MAAMK,WAAW,GAAG,MAAM;EAAA;;EAC/B,MAAMC,GAAG,4BAAGL,YAAY,CAACM,OAAb,CAAqBT,QAArB,CAAH,yEAAqC,IAA9C;EACA,OAAOK,IAAI,CAACK,KAAL,CAAWF,GAAX,CAAP;AACD,CAHM;AAKP,OAAO,MAAMG,cAAc,GAAG,MAAM;EAClCR,YAAY,CAACS,UAAb,CAAwBZ,QAAxB;AACD,CAFM"},"metadata":{},"sourceType":"module"}