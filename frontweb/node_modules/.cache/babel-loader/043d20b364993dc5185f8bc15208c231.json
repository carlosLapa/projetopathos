{"ast":null,"code":"var _jsxFileName = \"C:\\\\ferreiraLapa\\\\projetopathos\\\\frontweb\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport './assets/styles/custom.scss';\nimport './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport Routes from 'Routes';\nimport { AuthContext } from 'AuthContext';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  /**Prover o Contexto Global - através de um useState - e com os dados que definimos no AuthContext\r\n   * Depois no return, provemos este estado eposteriomente podemos utilizar em toda a aplicação, \r\n   * (como podemos ver na Navbar)\r\n   */\n  const [authContextData, setAuthContextData] = useState({\n    authenticated: false\n  });\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authContextData,\n      setAuthContextData\n    },\n    children: [/*#__PURE__*/_jsxDEV(Routes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"9VggDq255Ds1gMgp0qhkY+QOXU4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ToastContainer","Routes","AuthContext","useState","App","authContextData","setAuthContextData","authenticated"],"sources":["C:/ferreiraLapa/projetopathos/frontweb/src/App.tsx"],"sourcesContent":["import 'react-toastify/dist/ReactToastify.css';\r\nimport './assets/styles/custom.scss';\r\nimport './App.css';\r\n\r\nimport { ToastContainer } from 'react-toastify';\r\nimport Routes from 'Routes';\r\nimport { AuthContext, AuthContextData } from 'AuthContext';\r\nimport { useState } from 'react';\r\n\r\nconst App = () => {\r\n  /**Prover o Contexto Global - através de um useState - e com os dados que definimos no AuthContext\r\n   * Depois no return, provemos este estado eposteriomente podemos utilizar em toda a aplicação, \r\n   * (como podemos ver na Navbar)\r\n   */\r\n  const [authContextData, setAuthContextData] = useState<AuthContextData>({\r\n    authenticated: false,\r\n  });\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authContextData, setAuthContextData }}>\r\n      <Routes />\r\n      <ToastContainer />\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;;AAAA,OAAO,uCAAP;AACA,OAAO,6BAAP;AACA,OAAO,WAAP;AAEA,SAASA,cAAT,QAA+B,gBAA/B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,QAA6C,aAA7C;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB;AACF;AACA;AACA;EACE,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCH,QAAQ,CAAkB;IACtEI,aAAa,EAAE;EADuD,CAAlB,CAAtD;EAIA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAAEF,eAAF;MAAmBC;IAAnB,CAA7B;IAAA,wBACE,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,cAAD;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CAfD;;GAAMF,G;;KAAAA,G;AAiBN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}