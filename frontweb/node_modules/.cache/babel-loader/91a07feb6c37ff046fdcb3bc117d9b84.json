{"ast":null,"code":"var _jsxFileName = \"C:\\\\ferreiraLapa\\\\projetopathos\\\\frontweb\\\\src\\\\components\\\\PrivateRoute\\\\index.tsx\";\nimport { Redirect, Route } from 'react-router-dom';\nimport { hasAnyRoles, isAuthenticated } from 'util/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\r\n * Componente que devolve um Route, do router-dom, que por sua vez contém o path e\r\n * o render, função que testa se está autenticado, se sim, renderiza os children, se não, redireciona para o login\r\n *\r\n * Mas para melhorar a experiencia do utilizador, vamos incrementar o redirect\r\n * no render, colocamos um argumento, location\r\n * no redirect, colocamos uma expressão com um objeto\r\n *\r\n * Acrescentamos testes para as permissões, do mais restrito para o mais \"livre\"\r\n * Testamos então se o user está autenticado (se não, direcciona para o login) e depois caso esteja, \r\n * testamos o role que possui (se não, direciona para a pagina geral dos edificios - que todos podem aceder),\r\n * caso tenha o role (neste admin), renderiza o children.\r\n * \r\n */\nconst PrivateRoute = _ref => {\n  let {\n    children,\n    path\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Route, {\n    path: path,\n    render: _ref2 => {\n      let {\n        location\n      } = _ref2;\n      return !isAuthenticated() ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: '/admin/auth/login',\n          state: {\n            from: location\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this) : !hasAnyRoles(['ROLE_ADMIN']) ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/admin/edificios\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: children\n      }, void 0, false);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Redirect","Route","hasAnyRoles","isAuthenticated","PrivateRoute","children","path","location","pathname","state","from"],"sources":["C:/ferreiraLapa/projetopathos/frontweb/src/components/PrivateRoute/index.tsx"],"sourcesContent":["import { Redirect, Route } from 'react-router-dom';\r\nimport { hasAnyRoles, isAuthenticated, Role } from 'util/requests';\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n  path: string;\r\n  roles: Role[];\r\n};\r\n\r\n/**\r\n * Componente que devolve um Route, do router-dom, que por sua vez contém o path e\r\n * o render, função que testa se está autenticado, se sim, renderiza os children, se não, redireciona para o login\r\n *\r\n * Mas para melhorar a experiencia do utilizador, vamos incrementar o redirect\r\n * no render, colocamos um argumento, location\r\n * no redirect, colocamos uma expressão com um objeto\r\n *\r\n * Acrescentamos testes para as permissões, do mais restrito para o mais \"livre\"\r\n * Testamos então se o user está autenticado (se não, direcciona para o login) e depois caso esteja, \r\n * testamos o role que possui (se não, direciona para a pagina geral dos edificios - que todos podem aceder),\r\n * caso tenha o role (neste admin), renderiza o children.\r\n * \r\n */\r\n\r\nconst PrivateRoute = ({ children, path }: Props) => {\r\n  return (\r\n    <Route\r\n      path={path}\r\n      render={({ location }) =>\r\n        !isAuthenticated() ? (\r\n          <Redirect\r\n            to={{\r\n              pathname: '/admin/auth/login',\r\n              state: { from: location },\r\n            }}\r\n          />\r\n        ) : !hasAnyRoles(['ROLE_ADMIN']) ? (\r\n          <Redirect to=\"/admin/edificios\" />\r\n        ) : (\r\n          <>{children}</>\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAAmD,eAAnD;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,YAAY,GAAG,QAA+B;EAAA,IAA9B;IAAEC,QAAF;IAAYC;EAAZ,CAA8B;EAClD,oBACE,QAAC,KAAD;IACE,IAAI,EAAEA,IADR;IAEE,MAAM,EAAE;MAAA,IAAC;QAAEC;MAAF,CAAD;MAAA,OACN,CAACJ,eAAe,EAAhB,gBACE,QAAC,QAAD;QACE,EAAE,EAAE;UACFK,QAAQ,EAAE,mBADR;UAEFC,KAAK,EAAE;YAAEC,IAAI,EAAEH;UAAR;QAFL;MADN;QAAA;QAAA;QAAA;MAAA,QADF,GAOI,CAACL,WAAW,CAAC,CAAC,YAAD,CAAD,CAAZ,gBACF,QAAC,QAAD;QAAU,EAAE,EAAC;MAAb;QAAA;QAAA;QAAA;MAAA,QADE,gBAGF;QAAA,UAAGG;MAAH,iBAXI;IAAA;EAFV;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CApBD;;KAAMD,Y;AAsBN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}