{"ast":null,"code":"var _jsxFileName = \"C:\\\\ferreiraLapa\\\\projetopathos\\\\frontweb\\\\src\\\\components\\\\PrivateRoute\\\\index.tsx\";\nimport { Redirect, Route } from 'react-router-dom';\nimport { hasAnyRoles, isAuthenticated } from 'util/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/*\r\nComponente que devolve um Route, do router-dom, que por sua vez contém o path e \r\no render, função que testa se está autenticado, se sim, renderiza os children, se não, redireciona para o login \r\n*/\nconst PrivateRoute = _ref => {\n  let {\n    children,\n    path,\n    roles = []\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Route, {\n    path: path,\n    render: _ref2 => {\n      let {\n        location\n      } = _ref2;\n      return !isAuthenticated() ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: '/admin/auth/login',\n          state: {\n            from: location\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this) : !hasAnyRoles(roles) ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/admin/edificios\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: children\n      }, void 0, false);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Redirect","Route","hasAnyRoles","isAuthenticated","PrivateRoute","children","path","roles","location","pathname","state","from"],"sources":["C:/ferreiraLapa/projetopathos/frontweb/src/components/PrivateRoute/index.tsx"],"sourcesContent":["import { Redirect, Route } from 'react-router-dom';\r\nimport { hasAnyRoles, isAuthenticated, Role } from 'util/auth';\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n  path: string;\r\n  roles?: Role[];\r\n};\r\n\r\n/*\r\nComponente que devolve um Route, do router-dom, que por sua vez contém o path e \r\no render, função que testa se está autenticado, se sim, renderiza os children, se não, redireciona para o login \r\n*/\r\nconst PrivateRoute = ({ children, path, roles = [] }: Props) => {\r\n  return (\r\n    <Route\r\n      path={path}\r\n      render={({ location }) =>\r\n        !isAuthenticated() ? (\r\n          <Redirect\r\n            to={{\r\n              pathname: '/admin/auth/login',\r\n              state: { from: location },\r\n            }}\r\n          />\r\n        ) : !hasAnyRoles(roles) ? (\r\n          <Redirect to=\"/admin/edificios\"></Redirect>\r\n        ) : (\r\n          <>{children}</>\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAAmD,WAAnD;;;;AAQA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,QAA2C;EAAA,IAA1C;IAAEC,QAAF;IAAYC,IAAZ;IAAkBC,KAAK,GAAG;EAA1B,CAA0C;EAC9D,oBACE,QAAC,KAAD;IACE,IAAI,EAAED,IADR;IAEE,MAAM,EAAE;MAAA,IAAC;QAAEE;MAAF,CAAD;MAAA,OACN,CAACL,eAAe,EAAhB,gBACE,QAAC,QAAD;QACE,EAAE,EAAE;UACFM,QAAQ,EAAE,mBADR;UAEFC,KAAK,EAAE;YAAEC,IAAI,EAAEH;UAAR;QAFL;MADN;QAAA;QAAA;QAAA;MAAA,QADF,GAOI,CAACN,WAAW,CAACK,KAAD,CAAZ,gBACF,QAAC,QAAD;QAAU,EAAE,EAAC;MAAb;QAAA;QAAA;QAAA;MAAA,QADE,gBAGF;QAAA,UAAGF;MAAH,iBAXI;IAAA;EAFV;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CApBD;;KAAMD,Y;AAsBN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}