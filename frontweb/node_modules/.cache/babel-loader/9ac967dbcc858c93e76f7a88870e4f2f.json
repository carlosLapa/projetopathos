{"ast":null,"code":"var _process$env$REACT_AP, _process$env$REACT_AP2, _process$env$REACT_AP3;\n\nimport axios from 'axios';\nimport qs from 'qs';\n/*\r\n\r\n*/\n\n/*\r\nConstante, de Url, para utilizar uma variável de ambiente, compatível com o Netlify, \r\ne caso não esteja definida, através do operador de coalescência (?? no Javascript/Typescript) buscar (à direita) o url padrão para testes locais\r\n*/\nexport const BASE_URL = (_process$env$REACT_AP = process.env.REACT_APP_BACKEND_URL) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : 'http://localhost:8080';\n/* Variável de teste para gerar o Authorization (através do algoritmo btoa - base64) q integra o cabeçalho de login (como está no Postman) */\n\nconst CLIENT_ID = (_process$env$REACT_AP2 = process.env.REACT_APP_CLIENT_ID) !== null && _process$env$REACT_AP2 !== void 0 ? _process$env$REACT_AP2 : 'projetopathos';\nconst CLIENT_SECRET = (_process$env$REACT_AP3 = process.env.REACT_APP_CLIENT_SECRET) !== null && _process$env$REACT_AP3 !== void 0 ? _process$env$REACT_AP3 : 'projetopathos123';\n/* Função auxiliar para gerar o código de Authorization  */\n\nconst basicHeader = () => 'Basic ' + window.btoa(CLIENT_ID + ':' + CLIENT_SECRET);\n/* Função para fazer a requisição de login  \r\nO \"loginData\" leva as credenciais do user que vão no corpo da requisição (username e password)\r\n*/\n\n\n/* Nesta função, temos que passar os cabeçalhos mediante o content-type que definimos (ver Postman) \r\n   Podemos utilizar o headers que \"casa\" com o argumento homónimo contido no AxiosRequestConfig\r\n\r\n   Seguidamente, temos que implementar o Body da requisição (ver Postman). Criamos a const data para esse efeito.\r\n   Com o objeto composto por username, password e grant_type, mas convertidos para url_form_encoded. Para tal usamos uma função da \"qs\" \r\n   Também aproveitamos os dados contidos no loginData (através do spread operator) e complementamos com o grant_type \r\n*/\nexport const requestBackendLogin = loginData => {\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    Authorization: basicHeader()\n  };\n  const data = qs.stringify({ ...loginData,\n    grant_type: 'password'\n  });\n  return axios({\n    method: 'POST',\n    baseURL: BASE_URL,\n    url: '/oauth/token',\n    data,\n    headers\n  });\n};","map":{"version":3,"names":["axios","qs","BASE_URL","process","env","REACT_APP_BACKEND_URL","CLIENT_ID","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","basicHeader","window","btoa","requestBackendLogin","loginData","headers","Authorization","data","stringify","grant_type","method","baseURL","url"],"sources":["C:/ferreiraLapa/projetopathos/frontweb/src/utils/requests.ts"],"sourcesContent":["import axios from 'axios';\r\nimport qs from 'qs';\r\n\r\n/*\r\n\r\n*/\r\ntype LoginResponse = {\r\n  access_token: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n  scope: string;\r\n  userFirstName: string;\r\n  userId: number;\r\n};\r\n\r\n/*\r\nConstante, de Url, para utilizar uma variável de ambiente, compatível com o Netlify, \r\ne caso não esteja definida, através do operador de coalescência (?? no Javascript/Typescript) buscar (à direita) o url padrão para testes locais\r\n*/\r\nexport const BASE_URL =\r\n  process.env.REACT_APP_BACKEND_URL ?? 'http://localhost:8080';\r\n\r\n/* Variável de teste para gerar o Authorization (através do algoritmo btoa - base64) q integra o cabeçalho de login (como está no Postman) */\r\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID ?? 'projetopathos';\r\nconst CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET ?? 'projetopathos123';\r\n\r\n/* Função auxiliar para gerar o código de Authorization  */\r\nconst basicHeader = () =>\r\n  'Basic ' + window.btoa(CLIENT_ID + ':' + CLIENT_SECRET);\r\n\r\n/* Função para fazer a requisição de login  \r\nO \"loginData\" leva as credenciais do user que vão no corpo da requisição (username e password)\r\n*/\r\ntype LoginData = {\r\n  username: string;\r\n  password: string;\r\n};\r\n\r\n/* Nesta função, temos que passar os cabeçalhos mediante o content-type que definimos (ver Postman) \r\n   Podemos utilizar o headers que \"casa\" com o argumento homónimo contido no AxiosRequestConfig\r\n\r\n   Seguidamente, temos que implementar o Body da requisição (ver Postman). Criamos a const data para esse efeito.\r\n   Com o objeto composto por username, password e grant_type, mas convertidos para url_form_encoded. Para tal usamos uma função da \"qs\" \r\n   Também aproveitamos os dados contidos no loginData (através do spread operator) e complementamos com o grant_type \r\n*/\r\nexport const requestBackendLogin = (loginData: LoginData) => {\r\n  const headers = {\r\n    'Content-Type': 'application/x-www-form-urlencoded',\r\n    Authorization: basicHeader(),\r\n  };\r\n\r\n  const data = qs.stringify({\r\n    ...loginData,\r\n    grant_type: 'password',\r\n  });\r\n\r\n  return axios({\r\n    method: 'POST',\r\n    baseURL: BASE_URL,\r\n    url: '/oauth/token',\r\n    data,\r\n    headers,\r\n  });\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,4BACnBC,OAAO,CAACC,GAAR,CAAYC,qBADO,yEACkB,uBADhC;AAGP;;AACA,MAAMC,SAAS,6BAAGH,OAAO,CAACC,GAAR,CAAYG,mBAAf,2EAAsC,eAArD;AACA,MAAMC,aAAa,6BAAGL,OAAO,CAACC,GAAR,CAAYK,uBAAf,2EAA0C,kBAA7D;AAEA;;AACA,MAAMC,WAAW,GAAG,MAClB,WAAWC,MAAM,CAACC,IAAP,CAAYN,SAAS,GAAG,GAAZ,GAAkBE,aAA9B,CADb;AAGA;AACA;AACA;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,mBAAmB,GAAIC,SAAD,IAA0B;EAC3D,MAAMC,OAAO,GAAG;IACd,gBAAgB,mCADF;IAEdC,aAAa,EAAEN,WAAW;EAFZ,CAAhB;EAKA,MAAMO,IAAI,GAAGhB,EAAE,CAACiB,SAAH,CAAa,EACxB,GAAGJ,SADqB;IAExBK,UAAU,EAAE;EAFY,CAAb,CAAb;EAKA,OAAOnB,KAAK,CAAC;IACXoB,MAAM,EAAE,MADG;IAEXC,OAAO,EAAEnB,QAFE;IAGXoB,GAAG,EAAE,cAHM;IAIXL,IAJW;IAKXF;EALW,CAAD,CAAZ;AAOD,CAlBM"},"metadata":{},"sourceType":"module"}