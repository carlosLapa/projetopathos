{"ast":null,"code":"var _jsxFileName = \"C:\\\\ferreiraLapa\\\\projetopathos\\\\frontweb\\\\src\\\\components\\\\Pagination\\\\index.tsx\";\nimport { ReactComponent as ArrowIcon } from 'assets/images/arrow.svg';\nimport ReactPaginate from 'react-paginate';\nimport './styles.css';\n/**\r\n * Este tipo serve para a parametrização da Pagination e que contém a função (q servirá de evento), para comunicar e notificar,\r\n * segundo o padrão observer, com o componente do List (do admin) e do Catálogo (nas paginas).\r\n * Acresce que estes atributos podem ser usados em conjunto com os do SpringPage (ver como está no List)\r\n *\r\n * Aqui tipamos a função (typesafe) para garantir que é recebido um número como argumento, numa função que seja void,\r\n * ou seja, não é qualquer função que pode ser inscrita no evento.\r\n * Essa função pode ser opcional (não é obrigado a preencher)\r\n *\r\n * Neste caso, o evento que será disparado, é nativo do ReactPaginate - onPageChange\r\n * que recebe como argumento, de acordo com o ReactPaginate, os itens da paginação (items)\r\n * e depois a partir daí, podemos chamar, através do .selected, o numero da página que foi mudada já no componente List e Catálogo\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Pagination = _ref => {\n  let {\n    forcePage,\n    pageCount,\n    range,\n    onChange\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(ReactPaginate, {\n    forcePage: forcePage,\n    pageCount: pageCount,\n    pageRangeDisplayed: range,\n    marginPagesDisplayed: 1,\n    containerClassName: \"pagination-container\",\n    pageLinkClassName: \"pagination-item\",\n    breakClassName: \"pagination-item\",\n    previousClassName: \"arrow-previous\",\n    nextClassName: \"arrow-next\",\n    activeLinkClassName: \"pagination-link-active\",\n    disabledClassName: \"arrow-inactive\",\n    onPageChange: items => onChange ? onChange(items.selected) : {},\n    previousLabel: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination-arrow-container\",\n      children: [/*#__PURE__*/_jsxDEV(ArrowIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this),\n    nextLabel: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination-arrow-container\",\n      children: [/*#__PURE__*/_jsxDEV(ArrowIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Pagination;\nexport default Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["ReactComponent","ArrowIcon","ReactPaginate","Pagination","forcePage","pageCount","range","onChange","items","selected"],"sources":["C:/ferreiraLapa/projetopathos/frontweb/src/components/Pagination/index.tsx"],"sourcesContent":["import { ReactComponent as ArrowIcon } from 'assets/images/arrow.svg';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport './styles.css';\r\n\r\n/**\r\n * Este tipo serve para a parametrização da Pagination e que contém a função (q servirá de evento), para comunicar e notificar,\r\n * segundo o padrão observer, com o componente do List (do admin) e do Catálogo (nas paginas).\r\n * Acresce que estes atributos podem ser usados em conjunto com os do SpringPage (ver como está no List)\r\n *\r\n * Aqui tipamos a função (typesafe) para garantir que é recebido um número como argumento, numa função que seja void,\r\n * ou seja, não é qualquer função que pode ser inscrita no evento.\r\n * Essa função pode ser opcional (não é obrigado a preencher)\r\n *\r\n * Neste caso, o evento que será disparado, é nativo do ReactPaginate - onPageChange\r\n * que recebe como argumento, de acordo com o ReactPaginate, os itens da paginação (items)\r\n * e depois a partir daí, podemos chamar, através do .selected, o numero da página que foi mudada já no componente List e Catálogo\r\n */\r\ntype Props = {\r\n  forcePage?: number;\r\n  pageCount: number;\r\n  range: number;\r\n  onChange?: (pageNumber: number) => void;\r\n};\r\n\r\nconst Pagination = ({ forcePage, pageCount, range, onChange }: Props) => {\r\n  return (\r\n    <ReactPaginate\r\n      forcePage={forcePage}\r\n      pageCount={pageCount}\r\n      pageRangeDisplayed={range}\r\n      marginPagesDisplayed={1}\r\n      containerClassName=\"pagination-container\"\r\n      pageLinkClassName=\"pagination-item\"\r\n      breakClassName=\"pagination-item\"\r\n      previousClassName=\"arrow-previous\"\r\n      nextClassName=\"arrow-next\"\r\n      activeLinkClassName=\"pagination-link-active\"\r\n      disabledClassName=\"arrow-inactive\"\r\n      onPageChange={(items) => (onChange ? onChange(items.selected) : {})}\r\n      previousLabel={\r\n        <div className=\"pagination-arrow-container\">\r\n          <ArrowIcon />{' '}\r\n        </div>\r\n      }\r\n      nextLabel={\r\n        <div className=\"pagination-arrow-container\">\r\n          <ArrowIcon />{' '}\r\n        </div>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n"],"mappings":";AAAA,SAASA,cAAc,IAAIC,SAA3B,QAA4C,yBAA5C;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,OAAO,cAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAQA,MAAMC,UAAU,GAAG,QAAsD;EAAA,IAArD;IAAEC,SAAF;IAAaC,SAAb;IAAwBC,KAAxB;IAA+BC;EAA/B,CAAqD;EACvE,oBACE,QAAC,aAAD;IACE,SAAS,EAAEH,SADb;IAEE,SAAS,EAAEC,SAFb;IAGE,kBAAkB,EAAEC,KAHtB;IAIE,oBAAoB,EAAE,CAJxB;IAKE,kBAAkB,EAAC,sBALrB;IAME,iBAAiB,EAAC,iBANpB;IAOE,cAAc,EAAC,iBAPjB;IAQE,iBAAiB,EAAC,gBARpB;IASE,aAAa,EAAC,YAThB;IAUE,mBAAmB,EAAC,wBAVtB;IAWE,iBAAiB,EAAC,gBAXpB;IAYE,YAAY,EAAGE,KAAD,IAAYD,QAAQ,GAAGA,QAAQ,CAACC,KAAK,CAACC,QAAP,CAAX,GAA8B,EAZlE;IAaE,aAAa,eACX;MAAK,SAAS,EAAC,4BAAf;MAAA,wBACE,QAAC,SAAD;QAAA;QAAA;QAAA;MAAA,QADF,EACgB,GADhB;IAAA;MAAA;MAAA;MAAA;IAAA,QAdJ;IAkBE,SAAS,eACP;MAAK,SAAS,EAAC,4BAAf;MAAA,wBACE,QAAC,SAAD;QAAA;QAAA;QAAA;MAAA,QADF,EACgB,GADhB;IAAA;MAAA;MAAA;MAAA;IAAA;EAnBJ;IAAA;IAAA;IAAA;EAAA,QADF;AA0BD,CA3BD;;KAAMN,U;AA6BN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}