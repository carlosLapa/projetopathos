{"ast":null,"code":"var _jsxFileName = \"C:\\\\ferreiraLapa\\\\projetopathos\\\\frontweb\\\\src\\\\pages\\\\Catalogo\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport EdificioCard from 'components/EdificioCard';\nimport Pagination from 'components/Pagination';\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { requestBackend } from 'util/requests';\nimport CardLoader from './CardLoader';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Catalogo = () => {\n  _s();\n\n  /*\r\n  useState para a paginação de edificios, que armazena a página q chega do Backend, e que depois vai preencher a tela e depois poder atualizá-la;\r\n  A SpringPage <T> do tipo genérico (criada na pasta \"vendor\"), que terá uma lista [], que neste caso vai receber o tipo Edificio, permite \"casar\"\r\n  a info que nos chega do Backend, com a info que vamos tratar e mostrar no Frontend;\r\n    useEffect para efetuar a requisição somente quando entramos na página, com 2 argumentos:\r\n  a função, com o AxiosParams, que recebem o metodo, url e queryParams. A data aqui, como é um método GET, não tem corpo (além de que está como opcional, ?)\r\n  e ainda as dependencias []\r\n  !Cuidado na questão da dependência [] no final da response. Pois, cada vez que é detetada uma mudança na page, a requisição é efetuada novamente\r\n  o que pode dar azo a um ciclo infinito! Então por enquanto deixamos vazia.\r\n    depois a requisição axios já chama os params definidos anteriormente.\r\n  */\n  const [page, setPage] = useState();\n  /*\r\n  Estado - boleano - que define se está a carregar uma renderização de algum elemento, ou não. Neste caso os loaders da página de edificios.\r\n  Não tem parâmetros, apenas o valor inicial do isLoading (boolean false), significando que não está a carregar aquando da montagem do componente e \r\n  antes da requisição. \r\n  Também antes da requisição do axios, mudamos o estado (true), para dizer que está a carregar.\r\n  O \"finally\" executa uma função depois que resolver a \"promise\". Neste caso, vai alterar novamente o setIsLoading para \"false\", para o estado\r\n  em que não está a carregar.\r\n  \r\n  */\n\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const params = {\n      method: 'GET',\n      url: \"/edificios\",\n      params: {\n        page: 0,\n        size: 12\n      }\n    };\n    setIsLoading(true);\n    requestBackend(params).then(response => {\n      setPage(response.data);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  }, []);\n  /* Renderizar dinamicamente os cards do edificio\r\n  Através do \"page\" (que, neste caso, é uma SpringPage do tipo EDIFICIO), temos acesso ao atributo \"content\", que contém a lista de edificios\r\n  Quando o \"page\" tem o \"?\", é quando o \"useState\" está indefinido, ou seja, ainda não existe ou pode não ser retornado aquando a requisição\r\n  A repetição de cada <div> é feita através da função de alta ordem \"map\". \r\n  Percorre a lista e faz uma operação em cada elemento da mesma. Tem uma função que pega um elemento da lista (x ou neste caso, edificio)\r\n  e faz algo com o mesmo. No corpo da função colocamos o jsx (tudo o que está dentro da <div>).\r\n  Quando renderizamos uma coleção/array de elementos, é exigência do react colocar em cada elemento, o atributo \"key\", que tem q possuir um valor único, \r\n  para cada elemento a renderizar, de modo a evitar a repetição. Assim colocamos o id de cada edificio. \r\n  Aplicamos uma renderização condicional ternária para renderizar a página de edificios.\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-4 catalog-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row catalog-title-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edif\\xEDcios intervencionados\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(CardLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 22\n      }, this) : page === null || page === void 0 ? void 0 : page.content.map(edificio => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-6 col-lg-4 col-xl-6\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"edificios/1\",\n            children: /*#__PURE__*/_jsxDEV(EdificioCard, {\n              edificio: edificio\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)\n        }, edificio.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(Pagination, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Catalogo, \"8KOTgFnmVuo66eAxOPdWjbkjsAk=\");\n\n_c = Catalogo;\nexport default Catalogo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Catalogo\");","map":{"version":3,"names":["EdificioCard","Pagination","useEffect","useState","Link","requestBackend","CardLoader","Catalogo","page","setPage","isLoading","setIsLoading","params","method","url","size","then","response","data","finally","content","map","edificio","id"],"sources":["C:/ferreiraLapa/projetopathos/frontweb/src/pages/Catalogo/index.tsx"],"sourcesContent":["import { AxiosRequestConfig } from 'axios';\r\nimport EdificioCard from 'components/EdificioCard';\r\nimport Pagination from 'components/Pagination';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Edificio } from 'types/edificio';\r\nimport { SpringPage } from 'types/vendor/spring';\r\nimport { requestBackend } from 'util/requests';\r\nimport CardLoader from './CardLoader';\r\n\r\nimport './styles.css';\r\n\r\nconst Catalogo = () => {\r\n  /*\r\n  useState para a paginação de edificios, que armazena a página q chega do Backend, e que depois vai preencher a tela e depois poder atualizá-la;\r\n  A SpringPage <T> do tipo genérico (criada na pasta \"vendor\"), que terá uma lista [], que neste caso vai receber o tipo Edificio, permite \"casar\"\r\n  a info que nos chega do Backend, com a info que vamos tratar e mostrar no Frontend;\r\n\r\n  useEffect para efetuar a requisição somente quando entramos na página, com 2 argumentos:\r\n  a função, com o AxiosParams, que recebem o metodo, url e queryParams. A data aqui, como é um método GET, não tem corpo (além de que está como opcional, ?)\r\n  e ainda as dependencias []\r\n  !Cuidado na questão da dependência [] no final da response. Pois, cada vez que é detetada uma mudança na page, a requisição é efetuada novamente\r\n  o que pode dar azo a um ciclo infinito! Então por enquanto deixamos vazia.\r\n\r\n  depois a requisição axios já chama os params definidos anteriormente.\r\n  */\r\n  const [page, setPage] = useState<SpringPage<Edificio>>();\r\n\r\n  /*\r\n  Estado - boleano - que define se está a carregar uma renderização de algum elemento, ou não. Neste caso os loaders da página de edificios.\r\n  Não tem parâmetros, apenas o valor inicial do isLoading (boolean false), significando que não está a carregar aquando da montagem do componente e \r\n  antes da requisição. \r\n  Também antes da requisição do axios, mudamos o estado (true), para dizer que está a carregar.\r\n  O \"finally\" executa uma função depois que resolver a \"promise\". Neste caso, vai alterar novamente o setIsLoading para \"false\", para o estado\r\n  em que não está a carregar.\r\n  \r\n  */\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const params: AxiosRequestConfig = {\r\n      method: 'GET',\r\n      url: \"/edificios\",\r\n      params: {\r\n        page: 0,\r\n        size: 12,\r\n      }\r\n    };\r\n\r\n    setIsLoading(true);\r\n    requestBackend(params)\r\n      .then((response) => {\r\n        setPage(response.data);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  /* Renderizar dinamicamente os cards do edificio\r\nAtravés do \"page\" (que, neste caso, é uma SpringPage do tipo EDIFICIO), temos acesso ao atributo \"content\", que contém a lista de edificios\r\n\r\nQuando o \"page\" tem o \"?\", é quando o \"useState\" está indefinido, ou seja, ainda não existe ou pode não ser retornado aquando a requisição\r\nA repetição de cada <div> é feita através da função de alta ordem \"map\". \r\n\r\nPercorre a lista e faz uma operação em cada elemento da mesma. Tem uma função que pega um elemento da lista (x ou neste caso, edificio)\r\ne faz algo com o mesmo. No corpo da função colocamos o jsx (tudo o que está dentro da <div>).\r\n\r\nQuando renderizamos uma coleção/array de elementos, é exigência do react colocar em cada elemento, o atributo \"key\", que tem q possuir um valor único, \r\npara cada elemento a renderizar, de modo a evitar a repetição. Assim colocamos o id de cada edificio. \r\n\r\nAplicamos uma renderização condicional ternária para renderizar a página de edificios.\r\n*/\r\n  return (\r\n    <div className=\"container my-4 catalog-container\">\r\n      <div className=\"row catalog-title-container\">\r\n        <h1>Edifícios intervencionados</h1>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        {isLoading ? <CardLoader /> : (\r\n          page?.content.map((edificio) => {\r\n            return (\r\n              <div className=\"col-sm-6 col-lg-4 col-xl-6\" key={edificio.id}>\r\n                <Link to=\"edificios/1\">\r\n                  <EdificioCard edificio={edificio} />\r\n                </Link>\r\n              </div>\r\n            );\r\n          }))}\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <Pagination />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Catalogo;\r\n"],"mappings":";;;AACA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,kBAArB;AAGA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAO,cAAP;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGE,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,EAAhC;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMU,MAA0B,GAAG;MACjCC,MAAM,EAAE,KADyB;MAEjCC,GAAG,EAAE,YAF4B;MAGjCF,MAAM,EAAE;QACNJ,IAAI,EAAE,CADA;QAENO,IAAI,EAAE;MAFA;IAHyB,CAAnC;IASAJ,YAAY,CAAC,IAAD,CAAZ;IACAN,cAAc,CAACO,MAAD,CAAd,CACGI,IADH,CACSC,QAAD,IAAc;MAClBR,OAAO,CAACQ,QAAQ,CAACC,IAAV,CAAP;IACD,CAHH,EAIGC,OAJH,CAIW,MAAM;MACbR,YAAY,CAAC,KAAD,CAAZ;IACD,CANH;EAOD,CAlBQ,EAkBN,EAlBM,CAAT;EAoBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAKE,oBACE;IAAK,SAAS,EAAC,kCAAf;IAAA,wBACE;MAAK,SAAS,EAAC,6BAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAKE;MAAK,SAAS,EAAC,KAAf;MAAA,UACGD,SAAS,gBAAG,QAAC,UAAD;QAAA;QAAA;QAAA;MAAA,QAAH,GACRF,IADQ,aACRA,IADQ,uBACRA,IAAI,CAAEY,OAAN,CAAcC,GAAd,CAAmBC,QAAD,IAAc;QAC9B,oBACE;UAAK,SAAS,EAAC,4BAAf;UAAA,uBACE,QAAC,IAAD;YAAM,EAAE,EAAC,aAAT;YAAA,uBACE,QAAC,YAAD;cAAc,QAAQ,EAAEA;YAAxB;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF,GAAiDA,QAAQ,CAACC,EAA1D;UAAA;UAAA;UAAA;QAAA,QADF;MAOD,CARD;IAFJ;MAAA;MAAA;MAAA;IAAA,QALF,eAkBE;MAAK,SAAS,EAAC,KAAf;MAAA,uBACE,QAAC,UAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAlBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD,CAtFD;;GAAMhB,Q;;KAAAA,Q;AAwFN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}